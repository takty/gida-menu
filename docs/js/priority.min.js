"use strict";

/**
 *
 * Gida Menu - Priority (JS)
 *
 * @author Takuto Yanagida
 * @version 2021-07-05
 *
 */
window.GIDA = window['GIDA'] ?? {};

window.GIDA.menu_priority = function (id, opts) {
  const NS = 'gida-menu-priority';
  const CLS_BAR = NS + '-bar';
  const CLS_PANELS = NS + '-panels';
  const CLS_PANEL = NS + '-panel';
  const CLS_BUTTON = NS + '-button';
  const CLS_STATE_READY = 'ready';
  const CLS_STATE_ACTIVE = 'active';
  const CLS_STATE_OPENED = 'opened';
  const root = id ? document.getElementById(id) : document.getElementsByClassName(NS)[0];
  if (!root) return;
  const menuBar = root.querySelector('.menu') ?? root.getElementsByTagName('ul')[0];
  const lis = Array.from(menuBar.querySelectorAll('li'));
  const autoClose = opts['autoClose'] ?? true;
  let scrollTop = 0; // -------------------------------------------------------------------------

  /**
   *
   * Common Functions (JS)
   *
   * @author Takuto Yanagida
   * @version 2021-06-30
   *
   */

  const resizeListeners = [];
  const scrollListeners = [];

  function onResize(fn, doFirst = false) {
    if (doFirst) fn();
    resizeListeners.push(throttle(fn));
  }

  function onScroll(fn, doFirst = false) {
    if (doFirst) fn();
    scrollListeners.push(throttle(fn));
  } // -----------------------------------------------------------------------------


  const scrollableDetectionTargets = [];

  function addScrollableDetectionTarget(tar) {
    scrollableDetectionTargets.push(tar);
  }

  function initializeScrollableDetection() {
    const rob = new ResizeObserver(oes => {
      for (const oe of oes) detectScrollable(oe.target);
    });

    for (const tar of scrollableDetectionTargets) {
      rob.observe(tar);
      tar.addEventListener('scroll', throttle(() => {
        detectScrollable(tar);
      }));
    }
  }

  function detectScrollable(elm) {
    if (elm.scrollWidth - elm.clientWidth > 2) {
      // for avoiding needless scrolling
      const r = elm.scrollLeft / (elm.scrollWidth - elm.clientWidth);
      elm.classList[r < 0.95 ? 'add' : 'remove']('scrollable-right');
      elm.classList[0.05 < r ? 'add' : 'remove']('scrollable-left');
    } else {
      elm.classList.remove('scrollable-right');
      elm.classList.remove('scrollable-left');
    }
  } // -----------------------------------------------------------------------------


  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('resize', () => {
      for (const l of resizeListeners) l();
    }, {
      passive: true
    });
    window.addEventListener('scroll', () => {
      for (const l of scrollListeners) l();
    }, {
      passive: true
    });
    initializeScrollableDetection();
  });

  function throttle(fn) {
    let isRunning;

    function run() {
      isRunning = false;
      fn();
    }

    return () => {
      if (isRunning) return;
      isRunning = true;
      requestAnimationFrame(run);
    };
  } // -------------------------------------------------------------------------


  const [panel, menuPanel] = initPanel(root);
  const [liBtn, btn] = initButton(menuBar);
  menuBar.appendChild(liBtn);
  btn.addEventListener('click', e => {
    if (liBtn.classList.contains(CLS_STATE_OPENED)) {
      close(liBtn, panel);
    } else {
      open(liBtn, panel);
    }

    e.stopPropagation();
  });

  for (const li of lis) {
    li.addEventListener('click', () => {
      close(liBtn, panel);
    });
  }

  let ws = [];
  setTimeout(() => {
    ws = lis.map(e => e.offsetWidth);
    alignItems(ws, menuBar, menuPanel, lis, liBtn);
    onResize(() => {
      alignItems(ws, menuBar, menuPanel, lis, liBtn);
    });
  }, 10);
  setTimeout(() => {
    root.classList.add(CLS_STATE_READY);
  }, 100);

  if (autoClose) {
    onScroll(() => {
      doOnScroll(liBtn, panel);
    });
    document.addEventListener('click', () => {
      close(liBtn, panel);
    });
  } // -------------------------------------------------------------------------


  function initPanel(root) {
    const panelParent = document.createElement('div');
    panelParent.classList.add(CLS_PANELS);
    const panel = document.createElement('div');
    panel.classList.add(CLS_PANEL);
    const menu = document.createElement('ul');
    menu.classList.add('menu');
    panel.appendChild(menu);
    panelParent.appendChild(panel);
    root.appendChild(panelParent);
    return [panel, menu];
  }

  function initButton(menuBar) {
    const btn = document.createElement('button');
    btn.classList.add(CLS_BUTTON);
    const item = document.createElement('li');
    item.appendChild(btn);
    menuBar.appendChild(item);
    return [item, btn];
  } // -------------------------------------------------------------------------


  function close(liBtn, panel) {
    liBtn.classList.remove(CLS_STATE_OPENED);
    panel.classList.remove(CLS_STATE_ACTIVE);
    setTimeout(() => {
      panel.classList.remove(CLS_STATE_OPENED);
    }, 400);
  }

  function open(liBtn, panel) {
    liBtn.classList.add(CLS_STATE_OPENED);
    panel.classList.add(CLS_STATE_ACTIVE);
    setTimeout(() => {
      panel.classList.add(CLS_STATE_OPENED);
    }, 0);
    scrollTop = window.pageYOffset;
  }

  function doOnScroll(liBtn, panel) {
    const bcr = panel.getBoundingClientRect();

    if (bcr.bottom < 0 || // When not fixed
    0 < bcr.top && bcr.bottom < Math.abs(window.pageYOffset - scrollTop) // When fixed
    ) {
        close(liBtn, panel);
      }
  }

  function alignItems(ws, menuBar, menuPanel, lis, liBtn) {
    let remW = menuBar.parentElement.getBoundingClientRect().width;
    let sep = lis.length;
    const btnW = liBtn.clientWidth;
    const sum = ws.reduce((s, v) => s + v);

    if (remW < sum) {
      remW -= btnW;

      for (let i = 0; i < ws.length; i += 1) {
        if ((remW -= ws[i]) < 0) {
          sep = i;
          break;
        }
      }
    }

    for (let i = 0; i < sep; i += 1) {
      if (lis[i].parentElement === menuBar) {
        ws[i] = lis[i].offsetWidth;
      } else {
        menuBar.insertBefore(lis[i], liBtn);
      }
    }

    for (let i = sep; i < lis.length; i += 1) menuPanel.appendChild(lis[i]);

    liBtn.style.display = sep === lis.length ? 'none' : '';
  }
};
//# sourceMappingURL=priority.min.js.map