"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *
 * Gida Menu - Global (JS)
 *
 * @author Takuto Yanagida
 * @version 2021-07-07
 *
 */
(function () {
  window.GIDA = window['GIDA'] ?? {};

  window.GIDA.menu_global = function (id, opts) {
    new GlobalNav(id, opts);
  }; // -------------------------------------------------------------------------

  /**
   *
   * Common Functions (JS)
   *
   * @author Takuto Yanagida
   * @version 2021-06-30
   *
   */


  const resizeListeners = [];
  const scrollListeners = [];

  function onResize(fn, doFirst = false) {
    if (doFirst) fn();
    resizeListeners.push(throttle(fn));
  }

  function onScroll(fn, doFirst = false) {
    if (doFirst) fn();
    scrollListeners.push(throttle(fn));
  } // -----------------------------------------------------------------------------


  const scrollableDetectionTargets = [];

  function addScrollableDetectionTarget(tar) {
    scrollableDetectionTargets.push(tar);
  }

  function initializeScrollableDetection() {
    const rob = new ResizeObserver(oes => {
      for (const oe of oes) detectScrollable(oe.target);
    });

    for (const tar of scrollableDetectionTargets) {
      rob.observe(tar);
      tar.addEventListener('scroll', throttle(() => {
        detectScrollable(tar);
      }));
    }
  }

  function detectScrollable(elm) {
    if (elm.scrollWidth - elm.clientWidth > 2) {
      // for avoiding needless scrolling
      const r = elm.scrollLeft / (elm.scrollWidth - elm.clientWidth);
      elm.classList[r < 0.95 ? 'add' : 'remove']('scrollable-right');
      elm.classList[0.05 < r ? 'add' : 'remove']('scrollable-left');
    } else {
      elm.classList.remove('scrollable-right');
      elm.classList.remove('scrollable-left');
    }
  } // -----------------------------------------------------------------------------


  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('resize', () => {
      for (const l of resizeListeners) l();
    }, {
      passive: true
    });
    window.addEventListener('scroll', () => {
      for (const l of scrollListeners) l();
    }, {
      passive: true
    });
    initializeScrollableDetection();
  });

  function throttle(fn) {
    let isRunning;

    function run() {
      isRunning = false;
      fn();
    }

    return () => {
      if (isRunning) return;
      isRunning = true;
      requestAnimationFrame(run);
    };
  } // -------------------------------------------------------------------------


  class GlobalNav {
    constructor(id, opts) {
      this._root = id ? document.getElementById(id) : document.querySelector('.gida-menu-global');
      if (!this._root) return;
      this._openItem = null;
      this._openTime = 0;
      this._scrollTop = 0;
      this._panels = [];
      this._st = null;
      this._canceled = false;
      this._startX = 0;
      this._startY = 0;
      this._isOpenedByHover = false;
      this._bar = this._root.querySelector(GlobalNav.SEL_NAV_BAR);

      const menuItems = this._bar.querySelectorAll('button[data-panel]');

      this._panelParent = this._root.querySelector(GlobalNav.SEL_NAV_PANEL_PARENT);
      this._alignPanel = this._root.classList.contains('pulldown');
      const autoClose = opts['autoClose'] ?? true;
      const autoScroll = opts['autoScroll'] ?? true;
      this._suppressClickCloseAfterHover = opts['suppressClickCloseAfterHover'] ?? false;
      this._scrollViewOffset = opts['scrollViewOffset'] ?? 20;
      this._defMenuItem = opts['defaultMenuItem'] ?? null;
      this._child = opts['childNav'] ?? null;
      this._onBeforeOpen = opts['onBeforeOpen'] ?? null;

      if (this._panelParent) {
        this._panels = Array.prototype.slice.call(this._panelParent.children);
      } // for avoiding hover style


      if (0 < navigator.maxTouchPoints) {
        this._bar.addEventListener('touchstart', () => {
          this._bar.classList.add(GlobalNav.CLS_TOUCHED);

          this._panelParent.classList.add(GlobalNav.CLS_TOUCHED);
        });
      }

      this.addClickStateEventListener(menuItems);
      if (this._defMenuItem) this.open(this._defMenuItem);
      addScrollableDetectionTarget(this._bar);

      if (autoClose) {
        onScroll(() => {
          this.onScroll();
        });
        if (this._panelParent) this._panelParent.addEventListener('click', e => e.stopPropagation());
        document.addEventListener('click', () => {
          this.closeAll();
        });
      }

      if (autoScroll) {
        const mis = this._bar.querySelectorAll('a, button[data-panel]');

        this.initializeAutoScroll(mis);
      }
    }

    initializeAutoScroll(mis) {
      for (const mi of mis) {
        const li = mi.parentElement;

        if (li.classList.contains(GlobalNav.CLS_CURRENT) || li.classList.contains(GlobalNav.CLS_MENU_ANCESTOR) || li.classList.contains(GlobalNav.CLS_PAGE_ANCESTOR)) {
          this.ensureInView(mi);
        }
      }

      const left = document.createElement('div');
      const right = document.createElement('div');
      left.classList.add('scroll-left');
      right.classList.add('scroll-right');

      this._bar.insertBefore(left, this._bar.firstChild);

      this._bar.appendChild(right);

      this.addScrollerEventListener(left, -48);
      this.addScrollerEventListener(right, 48);
    }

    addClickStateEventListener(items) {
      for (const it of items) {
        it.addEventListener('click', e => {
          e.stopPropagation();
        }); // For preventing auto-close

        it.addEventListener('pointerenter', this.createEventListenerEnter(it));
        it.addEventListener('pointerdown', this.createEventListenerDown());
        it.addEventListener('touchstart', this.createEventListenerTouchStart());
        it.addEventListener('pointermove', this.createEventListenerMove());
        it.addEventListener('pointercancel', this.createEventListenerCancel());
        it.addEventListener('pointerup', this.createEventListenerUp(it));
        it.addEventListener('pointerleave', this.createEventListenerLeave()); // For disabling gray out when touching on iOS

        it.addEventListener('touchend', e => {
          if (e.cancelable) e.preventDefault();
        });
      }

      for (const p of this._panels) {
        p.addEventListener('mouseenter', () => this.cancelTimeout());
      }
    }

    addScrollerEventListener(elm, offset) {
      let st = null;
      let doing = false;
      const scroll = throttle(() => {
        this._bar.scrollBy(offset, 0);

        if (!doing) return;
        st = setTimeout(scroll, 100);
      });
      elm.addEventListener('mouseenter', e => {
        e.preventDefault();
        doing = true;
        st = setTimeout(scroll, 100);
      });
      elm.addEventListener('mouseleave', e => {
        e.preventDefault();
        doing = false;
        if (st) clearTimeout(st);
        st = null;
      });
    }

    cancelTimeout() {
      if (this._st) clearTimeout(this._st);
      this._st = null;
    } // ---------------------------------------------------------------------


    onScroll() {
      if (this._child && this._child._openItem) return;

      if (this._openItem) {
        const openPanel = this._panelParent.querySelector('.gida-menu-global-panel.active.opened');

        if (!openPanel) return;
        const bcr = openPanel.getBoundingClientRect();

        if (bcr.bottom < 0 || // When not fixed
        0 < bcr.top && bcr.bottom < Math.abs(window.pageYOffset - this._scrollTop) // When fixed
        ) {
            this.closeAll();
            this.cancelTimeout();
          }
      }
    } // ---------------------------------------------------------------------


    createEventListenerEnter(item) {
      return () => {
        if (item !== this._openItem) {
          this.cancelTimeout();
          this._st = setTimeout(() => {
            this.open(item, true);
          }, this._openItem !== null ? 400 : 200);
        }
      };
    }

    createEventListenerDown() {
      return e => {
        this._canceled = false;
        this._startX = e.clientX;
        this._startY = e.clientY;
      };
    }

    createEventListenerTouchStart() {
      return () => {
        this.cancelTimeout(); // For disabling timeout assigned in enter event

        this._touched = true;
      };
    }

    createEventListenerMove() {
      return e => {
        if (10 < Math.abs(e.clientX - this._startX) || 10 < Math.abs(e.clientY - this._startY)) {
          this._canceled = true;
        }
      };
    }

    createEventListenerCancel() {
      return () => {
        this._canceled = true;
      };
    }

    createEventListenerUp(item) {
      return () => {
        this.cancelTimeout();
        if (this._canceled) return;

        if (this._touched) {
          if (item === this._openItem) {
            this.closeAll();
          } else {
            this.open(item);
          }

          return;
        }

        const t = new Date().getTime();
        if (t - this._openTime < 200) return;

        if (item === this._openItem) {
          if (this._isOpenedByHover) {
            if (this._suppressClickCloseAfterHover) return;
            if (t - this._openTime < 400) return;
          }

          this.closeAll();
        } else {
          this.open(item);
        }
      };
    }

    createEventListenerLeave() {
      return () => {
        this.cancelTimeout();

        if (this._touched) {
          this._touched = false;
          return;
        }

        if (this._openItem !== null) {
          this._st = setTimeout(() => {
            this.closeAll();
          }, 800);
        }
      };
    } // ---------------------------------------------------------------------


    closeAll() {
      if (this._defMenuItem) {
        this.open(this._defMenuItem);
        return;
      }

      this.clearStateOpened();
      this.setStateActive(null);
    }

    open(item, isOpenedByHover = false) {
      this.clearStateOpened();
      this.setStateActive(item);
      this.ensureInView(item);
      item.parentElement.classList.add(GlobalNav.CLS_OPENED);
      setTimeout(() => {
        const p = this.itemToPanel(item);

        if (p) {
          p.classList.add(GlobalNav.CLS_OPENED);
          p.focus();
        }

        if (this._alignPanel) this.alignPanel(item, p);
        if (this._onBeforeOpen) this._onBeforeOpen(item, p);
      }, 0);
      this._openItem = item;
      this._openTime = new Date().getTime();
      this._scrollTop = window.pageYOffset;
      this._isOpenedByHover = isOpenedByHover;
    }

    setStateActive(item) {
      if (item === null) {
        for (const p of this._panels) {
          p.classList.remove(GlobalNav.CLS_ACTIVE);
        }
      } else {
        const tar = item.dataset['panel'] ?? '';

        for (const p of this._panels) {
          if (p.id === tar) {
            p.classList.add(GlobalNav.CLS_ACTIVE);
          } else {
            p.classList.remove(GlobalNav.CLS_ACTIVE);
          }
        }
      }
    }

    clearStateOpened() {
      if (this._child) this._child.closeAll();
      if (!this._openItem) return;

      this._openItem.parentElement.classList.remove(GlobalNav.CLS_OPENED);

      const item = this._openItem;
      setTimeout(() => {
        if (item === this._openItem) return;
        const p = this.itemToPanel(item);
        if (p) p.classList.remove(GlobalNav.CLS_OPENED);
      }, 400);
      this._openItem = null;
    }

    itemToPanel(item) {
      const tar = item.dataset['panel'] ?? '';
      if (tar) return document.getElementById(tar);
      return null;
    } // ---------------------------------------------------------------------


    ensureInView(mi) {
      const parent = mi.parentElement;
      const right = parent.offsetLeft + parent.offsetWidth;

      if (this._bar.offsetWidth < right) {
        this._bar.scrollLeft = parent.offsetLeft - this._scrollViewOffset;
      }

      if (parent.offsetLeft < this._bar.scrollLeft) {
        this._bar.scrollLeft = parent.offsetLeft - this._scrollViewOffset;
      }
    }

    alignPanel(item, panel) {
      if (!panel) return;
      const w = window.innerWidth;

      if (w <= 600) {
        panel.style.left = '';
        panel.style.right = '';
        return;
      }

      const bcrI = item.getBoundingClientRect();
      const bcrP = panel.getBoundingClientRect();

      const bcrPP = this._panelParent.getBoundingClientRect();

      const wP = bcrP.right - bcrP.left;
      const wPP = bcrPP.right - bcrPP.left;
      const l = bcrI.left - bcrPP.left;

      if (wPP < l + wP + 16) {
        panel.style.left = 'unset';
        panel.style.right = '0px';
      } else {
        panel.style.left = l + 'px';
        panel.style.right = 'unset';
      }
    }

  }

  _defineProperty(GlobalNav, "SEL_NAV_BAR", '.gida-menu-global-bar');

  _defineProperty(GlobalNav, "SEL_NAV_PANEL_PARENT", '.gida-menu-global-panels');

  _defineProperty(GlobalNav, "CLS_CURRENT", 'current');

  _defineProperty(GlobalNav, "CLS_MENU_ANCESTOR", 'menu-ancestor');

  _defineProperty(GlobalNav, "CLS_PAGE_ANCESTOR", 'page-ancestor');

  _defineProperty(GlobalNav, "CLS_TOUCHED", 'touched');

  _defineProperty(GlobalNav, "CLS_ACTIVE", 'active');

  _defineProperty(GlobalNav, "CLS_OPENED", 'opened');
})();
//# sourceMappingURL=global.min.js.map